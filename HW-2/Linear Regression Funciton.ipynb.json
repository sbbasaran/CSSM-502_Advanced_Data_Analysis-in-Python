{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ 5.99059884,  8.01049451,  9.00713085, 10.99530603])"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X = np.array([[1, 1], [1, 2], [2, 2], [2, 3]])\n",
    "y = np.dot(X, np.array([1, 2])) + 3\n",
    "y = y + np.random.normal(0, 0.01, len(y))\n",
    "y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(array([0.99663634, 2.00403542]), 2.997857202295476)"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.linear_model import LinearRegression\n",
    "reg = LinearRegression().fit(X, y)\n",
    "reg.coef_, reg.intercept_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0.99663634, 2.00403542, 2.9978572 ])"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Our method to estimate beta\n",
    "\n",
    "X = np.concatenate((X, np.ones((len(X), 1))), axis=1)\n",
    "\n",
    "# X'X\n",
    "X_prime_X = np.matmul(X.T, X)\n",
    "# inv(X'X)\n",
    "inv_X_prime_X = np.linalg.inv(X_prime_X)\n",
    "# X'y\n",
    "X_prime_y = np.matmul(X.T, y)\n",
    "# beta = (inv(X'X))X'y\n",
    "beta = np.matmul(inv_X_prime_X, X_prime_y)\n",
    "beta"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 1.67698223e-04, -8.38491113e-05, -8.38491113e-05],\n",
       "       [-8.38491113e-05,  8.38491113e-05, -4.19245557e-05],\n",
       "       [-8.38491113e-05, -4.19245557e-05,  2.30585056e-04]])"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Our method to estimate variance of beta (k is assumed to be 0 here)\n",
    "\n",
    "y_hat = np.matmul(X, beta)\n",
    "e = y - y_hat\n",
    "sigma_2 = np.matmul(e.T, e)/(len(y) - 1)\n",
    "var_beta = sigma_2*inv_X_prime_X\n",
    "var_beta"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "interpreter": {
   "hash": "b3ba2566441a7c06988d0923437866b63cedc61552a5af99d1f4fb67d367b25f"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
